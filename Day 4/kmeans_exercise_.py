# -*- coding: utf-8 -*-
"""KMeans exercise - .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hgbWjbzPUQiJd-UPv149i-M0XWpbNV6h
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs

#about make_blobs - documentation
#https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_blobs.html

#dataset 1 - low variance.. therefore the KMean algorithm works fine for 3 clusters
n_samples = 1500
random_state = 170
X, y = make_blobs(n_samples=n_samples, random_state=random_state)

plt.scatter(X[:, 0], X[:, 1], c=y, cmap='winter')

model = KMeans(n_clusters=10)
model.fit(X)
all_predictions = model.predict(X)
plt.scatter(X[:, 0],X[:, 1],c=all_predictions,cmap=plt.cm.rainbow)

#dataset 2 - KMean doesnt work that well because the obvious clusters are not considered
transformation = [[0.60834549, -0.63667341],[-0.40887718,0.85253229]]
X_aniso = np.dot(X, transformation)

plt.scatter(X_aniso[:, 0], X_aniso[:, 1], cmap=plt.cm.rainbow)

model = KMeans(n_clusters=3)
model.fit(X_aniso)
all_predictions = model.predict(X_aniso)
plt.scatter(X_aniso[:, 0],X_aniso[:, 1],c=all_predictions,cmap=plt.cm.rainbow)

# from sklearn.cluster import DBSCAN
# db = DBSCAN(eps=0.3, min_samples=10).fit(X_aniso)
# # db_predict = db.predict(X_aniso)

# plt.scatter(X_aniso[:, 0],X_aniso[:, 1],c=db,cmap=plt.cm.rainbow)

#dataset 3 - high variance but somehow the KMean gives an ok answer
X_varied, y_varied = make_blobs(n_samples=n_samples,cluster_std=[1.0,2.5,0.5],random_state=random_state)

plt.scatter(X_varied[:, 0], X_varied[:, 1], c=y_varied, cmap='winter')

model = KMeans(n_clusters=3)
model.fit(X_varied)
all_predictions = model.predict(X_varied)
plt.scatter(X_varied[:, 0],X_varied[:, 1],c=all_predictions,cmap=plt.cm.rainbow)

#dataset 4 - works well
X_filtered = np.vstack((X[y == 0][:500],X[y==1][:100],X[y==2][:10]))

plt.scatter(X_filtered[:, 0], X_filtered[:, 1], cmap='winter')

model = KMeans(n_clusters=3)
model.fit(X_filtered)
all_predictions = model.predict(X_filtered)
plt.scatter(X_filtered[:, 0],X_filtered[:, 1],c=all_predictions,cmap=plt.cm.rainbow)