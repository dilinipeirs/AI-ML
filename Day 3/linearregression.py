# -*- coding: utf-8 -*-
"""LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LoC7fLgbf61aRaeRnqySm4RidBKmUwxI
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd  
import numpy as np  
import matplotlib.pyplot as plt  
from sklearn.model_selection import train_test_split 
from sklearn.linear_model imp
ort LinearRegression
from sklearn import metrics
from sklearn import preprocessing

# %matplotlib inline

dataset = pd.read_csv('Weather.csv')

dataset.shape

dataset.describe()

dataset.plot(x='MinTemp', y='MaxTemp', style='o')  
plt.title('MinTemp vs MaxTemp')  
plt.xlabel('MinTemp')  
plt.ylabel('MaxTemp')  
plt.show()

X = dataset['MinTemp'].values.reshape(-1,1)
y = dataset['MaxTemp'].values.reshape(-1,1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

regressor = LinearRegression()

regressor.fit(X_train, y_train) #training the algorithm

#To retrieve the intercept:
print(regressor.intercept_)
#For retrieving the slope:
print(regressor.coef_)

y_pred = regressor.predict(X_test)

regressor.score(X_test,y_test)

df = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})
df

df1 = df.head(25)
df1.plot(kind='bar',figsize=(16,10))
plt.grid(which='major', linestyle='-', linewidth='0.5', color='green')
plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
plt.show()

plt.scatter(X_test, y_test,  color='gray')
plt.plot(X_test, y_pred, color='red', linewidth=2)
plt.show()

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))



X1 = dataset[['MinTemp', 'WindGustSpd']].values.reshape(-1,2)
y1 = dataset['MaxTemp'].values.reshape(-1,1)
X_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size=0.2, random_state=0)
regressor = LinearRegression()

regressor.fit(X_train, y_train) #training the algorithm

temp_df = dataset[['MinTemp', 'WindGustSpd','MaxTemp']]

temp_df = temp_df.dropna()
temp_df = temp_df.reset_index(drop=True)

temp_df.shape

X1 = temp_df[['MinTemp', 'WindGustSpd']].values.reshape(-1,2)
y1 = temp_df['MaxTemp'].values.reshape(-1,1)
X_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size=0.2, random_state=0)
regressor = LinearRegression()

regressor.fit(X_train, y_train) #training the algorithm

regressor.score(X_test,y_test)

plt.scatter(X1[:, 0], y1[:, 0])
plt.show()

plt.scatter(X1[:, 1], y1[:, 0])
plt.show()